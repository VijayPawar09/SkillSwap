{
  "version": 3,
  "sources": ["../../react-scrollable-feed/src/index.tsx"],
  "sourcesContent": ["import * as React from 'react';\nimport { CSSProperties } from 'react';\n\nexport type ScrollableFeedProps = {\n    forceScroll?: boolean;\n    animateScroll?: (element: HTMLElement, offset: number) => void;\n    onScrollComplete?: () => void;\n    changeDetectionFilter?: (previousProps: ScrollableFeedComponentProps, newProps: ScrollableFeedComponentProps) => boolean;\n    viewableDetectionEpsilon?: number;\n    className?: string;\n    onScroll?: (isAtBottom: boolean) => void;\n}\n\ntype ScrollableFeedComponentProps = React.PropsWithChildren<ScrollableFeedProps>;\n\nclass ScrollableFeed extends React.Component<React.PropsWithChildren<ScrollableFeedProps>> {\n    private readonly wrapperRef: React.RefObject<HTMLDivElement>;\n    private readonly bottomRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: ScrollableFeedProps) {\n        super(props);\n        this.bottomRef = React.createRef();\n        this.wrapperRef = React.createRef();\n        this.handleScroll = this.handleScroll.bind(this);\n\n        console.log(\"Component cstr\");\n    }\n\n    static defaultProps: ScrollableFeedProps = {\n        forceScroll: false,\n        animateScroll: (element: HTMLElement, offset: number): void => {\n            if (element.scrollBy) {\n                element.scrollBy({ top: offset });\n            }\n            else {\n                element.scrollTop = offset;\n            }\n        },\n        onScrollComplete: () => {},\n        changeDetectionFilter: () => true,\n        viewableDetectionEpsilon: 2,\n        onScroll: () => {},\n    };\n\n    getSnapshotBeforeUpdate(): boolean {\n      console.log(\"Component \", this.getSnapshotBeforeUpdate.name);\n        if (this.wrapperRef.current && this.bottomRef.current) {\n            const { viewableDetectionEpsilon } = this.props;\n            return ScrollableFeed.isViewable(this.wrapperRef.current, this.bottomRef.current, viewableDetectionEpsilon!); //This argument is passed down to componentDidUpdate as 3rd parameter\n        }\n        return false;\n    }\n\n    componentDidUpdate(previousProps: ScrollableFeedComponentProps, _previousState: any, snapshot: boolean): void {\n      console.log(\"Component \", this.componentDidUpdate.name);\n        const { forceScroll, changeDetectionFilter } = this.props;\n        const isValidChange = changeDetectionFilter!(previousProps, this.props);\n        if (isValidChange && (forceScroll || snapshot) && this.bottomRef.current && this.wrapperRef.current) {\n            this.scrollParentToChild(this.wrapperRef.current, this.bottomRef.current);\n        }\n    }\n\n    componentDidMount(): void {\n      console.log(\"Component \", this.componentDidMount.name);\n        //Scroll to bottom from the start\n        if (this.bottomRef.current && this.wrapperRef.current) {\n            this.scrollParentToChild(this.wrapperRef.current, this.bottomRef.current);\n        }\n    }\n\n    /**\n     * Scrolls a parent element such that the child element will be in view\n     * @param parent\n     * @param child\n     */\n    protected scrollParentToChild(parent: HTMLElement, child: HTMLElement): void {\n        const { viewableDetectionEpsilon } = this.props;\n        if (!ScrollableFeed.isViewable(parent, child, viewableDetectionEpsilon!)) {\n            //Source: https://stackoverflow.com/a/45411081/6316091\n            const parentRect = parent.getBoundingClientRect();\n            const childRect = child.getBoundingClientRect();\n\n            //Scroll by offset relative to parent\n            const scrollOffset = (childRect.top + parent.scrollTop) - parentRect.top;\n            const { animateScroll, onScrollComplete } = this.props;\n            if (animateScroll) {\n                animateScroll(parent, scrollOffset);\n                onScrollComplete!();\n            }\n        }\n    }\n\n    /**\n     * Returns whether a child element is visible within a parent element\n     *\n     * @param parent\n     * @param child\n     * @param epsilon\n     */\n    private static isViewable(parent: HTMLElement, child: HTMLElement, epsilon: number): boolean {\n        epsilon = epsilon || 0;\n\n        //Source: https://stackoverflow.com/a/45411081/6316091\n        const parentRect = parent.getBoundingClientRect();\n        const childRect = child.getBoundingClientRect();\n\n        const childTopIsViewable = (childRect.top >= parentRect.top);\n\n        const childOffsetToParentBottom = parentRect.top + parent.clientHeight - childRect.top;\n        const childBottomIsViewable = childOffsetToParentBottom + epsilon >= 0;\n\n        return childTopIsViewable && childBottomIsViewable;\n    }\n\n    /**\n     * Fires the onScroll event, sending isAtBottom boolean as its first parameter\n     */\n    protected handleScroll(): void {\n        const { viewableDetectionEpsilon, onScroll } = this.props;\n        if (onScroll && this.bottomRef.current && this.wrapperRef.current) {\n            const isAtBottom = ScrollableFeed.isViewable(this.wrapperRef.current, this.bottomRef.current, viewableDetectionEpsilon!);\n            onScroll(isAtBottom);\n        }\n    }\n\n    /**\n     * Scroll to the bottom\n     */\n    public scrollToBottom(): void {\n        if (this.bottomRef.current && this.wrapperRef.current) {\n            this.scrollParentToChild(this.wrapperRef.current, this.bottomRef.current);\n        }\n    }\n\n    render(): React.ReactNode {\n      console.log(\"Component \", this.render.name);\n\n        const style: CSSProperties = {\n            maxHeight: \"inherit\",\n            height: \"inherit\",\n            overflowY: \"auto\",\n        };\n        const { children, className } = this.props;\n        return (\n            <div className={className} style={style} ref={this.wrapperRef} onScroll={this.handleScroll}>\n                {children}\n                <div ref={this.bottomRef}></div>\n            </div>\n        );\n    }\n}\n\nexport default ScrollableFeed;\n"],
  "mappings": "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",
  "names": ["ScrollableFeed", "Component", "constructor", "props", "super", "this", "wrapperRef", "bottomRef", "createRef", "handleScroll", "bind", "console", "log", "getSnapshotBeforeUpdate", "name", "current", "viewableDetectionEpsilon", "isViewable", "componentDidUpdate", "previousProps", "_previousState", "snapshot", "forceScroll", "changeDetectionFilter", "scrollParentToChild", "componentDidMount", "parent", "child", "parentRect", "getBoundingClientRect", "scrollOffset", "top", "scrollTop", "animateScroll", "onScrollComplete", "epsilon", "childRect", "clientHeight", "onScroll", "scrollToBottom", "render", "children", "className", "React", "style", "maxHeight", "height", "overflowY", "ref", "createElement", "defaultProps", "element", "offset", "scrollBy"]
}
